// The Brain
function rename(layerName, currIdx, width, height, selectionCount, basename, startsFrom) {
	var newLayerName = basename;
  // Interator
  var nInterators = newLayerName.match(/%N+/ig),
			aInterators = newLayerName.match(/%A/ig),
			totalItems = selectionCount;


	// Number Interator
	if (nInterators != null) {
		var i = 0;

		function replaceNumber(match)
		{
			var nnSize = match.length - 1,
				letter = match.charAt(1),
				num	= (letter == "N") ? currIdx : totalItems - currIdx - 1;
				num += startsFrom;

				// Check weather or not the number is bigger than the nnSizes (works up to 9999)
				if (num > 999 && (nnSize == 1 || nnSize == 2 || nnSize == 3))
					nnSize = 4
				else if (num > 99 && (nnSize == 1 || nnSize == 2))
					nnSize = 3
				else if (num > 9 && nnSize == 1)
					nnSize = 2

			return paddy(num, nnSize);
		}

		newLayerName = newLayerName.replace(/\%n+/ig, replaceNumber);
	}

	// Alpha Interator
	if (aInterators != null) {
		var i = 0,
				alphaStr = "abcdefghijklmnopqrstuvwxyz",
				alphaArr = alphaStr.split(""),
				totalAlpha = alphaArr.length;


		function replaceAlpha(match)
		{
			var aaSize = match.length - 1,
				letter = match.charAt(1),
				alpha	= alphaArr[currIdx % totalAlpha];

				if (currIdx >= totalAlpha)
				{
					var flIdx = Math.floor(currIdx / totalAlpha);
					alpha = "" + alphaArr[flIdx - 1] + "" + alpha
				}

			return (letter == "A") ? alpha.toUpperCase() : alpha
		}

		newLayerName = newLayerName.replace(/\%a/ig, replaceAlpha);
	}


	// Replace plus
	newLayerName = newLayerName.replace(/(\\\+)|\+/, function(_, a) { return a || layerName; });

	// Replace escaped plus
	newLayerName = newLayerName.replace(/\\\+/g, "+");

	// Replace asterisks
	newLayerName = newLayerName.replace(/(\\\*)|\*/g, function(_, a) { return a || layerName; });

	// Replace escaped asterisks
	newLayerName = newLayerName.replace(/\\\*/g, "*");

	// Add Width and/or height
    newLayerName = newLayerName.replace(/%w/ig, width);
    newLayerName = newLayerName.replace(/%h/ig, height);

    // Return new name
    return newLayerName;
}

// Zero Fill Helper
function paddy(n, p, c) {
    var pad_char = typeof c !== 'undefined' ? c : '0';
    var pad = new Array(1 + p).join(pad_char);
    return (pad + n).slice(-pad.length);
}


function createDialog(selection, suggestedName) {
	var alert = COSAlertWindow.new();

	function createTextFieldWithLabel(label,defaultValue) {
			alert.addTextLabelWithValue(label);
			alert.addTextFieldWithValue(defaultValue);
	}

	alert.setMessageText("Rename Selected Layers");
	if(selection.every(function (el) { return (el.class() == "MSArtboardGroup"); })) {
		alert.setMessageText("Rename Selected Artboard");
	}
	alert.setInformativeText("Helpers: \nNumber Sequence: %N Descending | %n Ascending \nDimensions: %W %H \nMove Original Layer Name: *");

	// Name
	createTextFieldWithLabel("Name:", suggestedName);
	var firstField = alert.viewAtIndex(1)

	// Interator
	createTextFieldWithLabel("Starts Number Sequence From:","1");
	var secondField = alert.viewAtIndex(3)

	// Set first responder
	alert.alert().window().setInitialFirstResponder(firstField)
	firstField.setNextKeyView(secondField)

	// Actions buttons.
	alert.addButtonWithTitle('OK');
	alert.addButtonWithTitle('Cancel');

	return alert;
}

// Check if interger
function isInt(value) {
  return !isNaN(value) &&
         parseInt(Number(value)) == value &&
         !isNaN(parseInt(value, 10));
}

function handleAlertResponse(alert, responseCode) {
		if (responseCode == "1000") {
				function valAtIndex (view, index) {
						return parseInt(view.viewAtIndex(index).stringValue());
				}

				return {
						basename: alert.viewAtIndex(1).stringValue(),
						startsFrom: valAtIndex(alert,3)
				}
		}

		return null;
}

function getNames(layers) {
	var names = [];
	var l = layers.count();

	while (l--) {
		names[l] = layers[l].name();
	}
	return names;
}

function sortStrings(array) {
	var clone = [NSMutableArray arrayWithArray:array];
	return clone.sort();
}

function findCommonPrefix(array) {
	var sorted = sortStrings(array);
	var first = sorted[0];
	var last = sorted.lastObject();

	if (first == last) {
		return first;
	}

	var length = first.length();
	var i = 0;

	while (i < length && first.charAt(i) == last.charAt(i)) {
		i++;
	}
	return first.substring(0, i);
}

function findSuggestedName(layers) {
	var names = getNames(layers);
	var common = findCommonPrefix(names);
	return !common ? "" : (common.trim() + " %n");
}

// Run
var renameSelectedObjects = function(context, selection) {
	var selectionCount = [selection count]
	var doc = context.document
  if (selectionCount > 0)
  {
		// Show dialog
		var alert = createDialog(selection, findSuggestedName(selection));
		var options=handleAlertResponse(alert,alert.runModal());
		if (!isInt(options.startsFrom)) options.startsFrom = 1;

    // Run on all selections
    for (var i=0; i<selectionCount; i++) {
        var layer = selection[i],
            frame = [layer frame],
            width = [frame width],
            height = [frame height];
        var name = rename([layer name], i, width, height, selectionCount, options.basename, options.startsFrom);
        [layer setName:name];
		
		// Prevent textlayer name from being renamed after editing
		layer.nameIsFixed = 1;

    // Success message
        [doc showMessage: "Rename it: Updated "+selectionCount+" layer(s)"];
    }
  }
  else
  {
      // No layer selected
      [doc showMessage: "Rename it: You need to select at least one layer"];
  }
}
var renameSelectedLayers = function(context) {
	renameSelectedObjects(context, context.selection);
}
var renameSelectedArtboard = function (context) {
	var firstArtboard;
	context.selection.some(function (el) {
		while (el && (el.class() != "MSArtboardGroup")) {
			el = el.parentGroup();
		}
		if(el) {
			firstArtboard = el;
			return true;
		}
		return false;
	});
	if (!firstArtboard) {
		return;
	}
	renameSelectedObjects(context, NSArray.arrayWithObject(firstArtboard));
}
